<div id="heatmap_container" class="spreadsheet_popup" style="max-width:600px ;max-height:600px;overflow: scroll;display: none">


  <div class="spreadsheet_box_title">
    <div style="float: left">Data heatmap</div>
    <div style="float: right;"><a href="#" onclick="cleanup_heatmap_plot(); return false;">Close</a></div>
    <br style="clear:both"/>
  </div>
  <div>
    <button class="zoomin" type="button">+</button>
    <button class="zoomout" type="button">--</button>
    <button class="export_svg">Save as SVG</button>
  </div>
  <div>
    <label for="amount">Screening (slider change):</label>
    <input type="text" id="amount" readonly style="border:0; color:#f6931f; font-weight:bold;">
  </div>

  <div class="slide ui-slider ui-slider-horizontal ui-widget ui-widget-content ui-corner-all" id="slide1" transform="translate(0,0)"> </div>
  <div id="heatmap" style=""></div>

</div>


<script type="text/javascript">

    function cleanup_heatmap_plot() {
        d3.selectAll('svg').remove();
        $j('#heatmap_container').hide();
    }

    //http://wiki.jqueryui.com/w/page/12138059/Slider#specs
    // range = true to avoid handles overlapping works only with two handels
    var colors = [ 'green', 'yellow','red'];
    var scaleIncrement = 0.1;
    var limits = [-10, 0, 50, 100];
    var origHeight = 0;

    $j('.zoomout').click(function(){
        //Scaling
        if (origHeight == 0) {
            origHeight = parseFloat($j('svg.grid').attr("height"));
        }
        var matrixTransformVal = $j('#heatmap_matrix').attr("transform").match(/[\d\.\d]+/g);
        if(matrixTransformVal[3] >= 0.2) {
            //$j('text.rowLabel').attr("style","opacity:0");
            matrixScaleY = parseFloat(matrixTransformVal[3]) -scaleIncrement;
            $j('#heatmap_matrix').removeAttr('transform');
            $j('#heatmap_matrix').attr('transform', 'translate(' + matrixTransformVal[0] + ',' + matrixTransformVal[1] + ') scale(' + matrixTransformVal[2] + ',' + matrixScaleY + ' )');

            //Height setting
            var prevHeight = parseFloat($j('svg.grid').attr("height"));
            $j('svg.grid').attr("height",  prevHeight - scaleIncrement*origHeight); // setting layer1 height
        }
    });

    $j('.zoomin').click(function(){
        if (origHeight == 0) {
            origHeight = parseFloat($j('svg.grid').attr("height"));
        }

        //Scaling
        var matrixTransformVal = $j('#heatmap_matrix').attr("transform").match(/[\d\.\d]+/g);

        //Don't allow to zoom in than actual size
        if(matrixTransformVal[3] <= 0.9) {
            if(matrixTransformVal[3] >= .5){
                //$j('text.rowLabel').attr('style', 'opacity:1');}
            }
            matrixScaleY = parseFloat(matrixTransformVal[3]) + scaleIncrement;
            $j('#heatmap_matrix').removeAttr('transform');
            $j('#heatmap_matrix').attr('transform', 'translate(' + matrixTransformVal[0] +',' + matrixTransformVal[1]+ ') scale('+ matrixTransformVal[2]+ ',' + matrixScaleY + ' )' );

            //Height setting
            var prevHeight = parseFloat($j('svg.grid').attr("height"));
            // console.log("former height: "+ $j('svg.grid').attr("height"), +" "+ scaleIncrement*origHeight);
            $j('svg.grid').attr("height",  prevHeight+ scaleIncrement*origHeight); // setting layer1 height
        }
    });
    $j('.export_svg').click(function() {
        try {
            var isFileSaverSupported = !!new Blob();
        } catch (e) {
            alert("blob not supported, cannot export .svg file");
        }

        //insert legend to SVG

        var legendRectWidth = 60;
        var legendRectHeight = 20;
        var offset = 100;
        var matrixTransformVal = $j('#heatmap_matrix').attr("transform").match(/[\d\.\d]+/g);

        var legend = d3.select("svg").insert("g", ":first-child")
            .attr("class", "legend")
            .attr("x", 0) //width*0.2)
            .attr("y", 0) //margin.left*2)

        var legend_colors = colors//.concat("blue")
        var color = d3.scale.ordinal()
            .range(legend_colors);
        legend.selectAll('g').data(legend_colors)
            .enter()
            .append('g')
            .each(function(d, i) {
                var g = d3.select(this);
                g.append("rect")
                // .attr("class", "legend")
                    .attr("x", offset+i*(legendRectWidth+1))
                    .attr("y", 0)
                    .attr("width", legendRectWidth)
                    .attr("height", legendRectHeight)
                    .style("fill", color)
                    .style("stroke", color)
                //.style("stroke", function(d) {
                //  d3.rgb(d.color).darker();
                //})
                g.append("text")
                    .attr("x", offset+i*(legendRectWidth)-5)
                    .attr("y", 30)
                    .attr("height",30)
                    .attr("width",100)
                    //    .style("fill", color_hash[String(i)][1])
                    .text($j('#slide1').slider.limits()[i]);//+" ... "+$j('#slide1').slider.limits()[i+1]);
            })
            .append("text")
            .attr("x", offset+3*(legendRectWidth)-2)
            .attr("y", 30)
            .text($j('#slide1').slider.limits()[3]);

        var html = d3.select("svg")
            .attr("title", "heatmap")
            .attr("version", 1.1)
            .attr("xmlns", "http://www.w3.org/2000/svg")
            .node().parentNode.innerHTML;
        var blob = new Blob([html], {type: "image/xvg+xml"});
        saveAs(blob, "heatmap.svg");
        //svg.remove(".legend")
        d3.selectAll(".legend").remove()
    });

    var doUpdate = function(event, ui) {

        // Setting handle/span background color
        $j('#slide1 .slide-back').remove();
        $j($j('#slide1 span').get().reverse()).each(function(i) {
            var  bgColor=colors.slice(0,colors.length-1).reverse()[i]
            var range_div = $j('<div></div>').addClass('slide-back').width($j(this).position().left - 5).css('background', bgColor);
            $j('#slide1').append(range_div);
        });
        // update limits label
        $j( "#amount" ).val( $j('#slide1').slider.limits() );

        update_heatmap( $j('#slide1').slider.limits());
    };

    // Creating custom slider
    $j('#slide1').slider({
        range: true,
        change: doUpdate,
        min: limits[0],
        max: limits[limits.length - 1],
        //range: true,
        values: limits.slice(1, limits.length-1),
        slide: doUpdate,
        step: 0.1
    });

    $j('#slide1').slider.limits = function() {
        var slider_limits = $j( "#slide1" ).slider("values"),
            slider_min = $j( "#slide1" ).slider("option", "min"),
            slider_max = $j( "#slide1" ).slider("option", "max");
        slider_limits.splice(0,0,slider_min);
        slider_limits.push(slider_max);
        return slider_limits;
    }

    doUpdate();
</script>